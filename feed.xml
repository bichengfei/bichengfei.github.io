<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://bichengfei.github.io/</id><title>BiChengfei's blog.</title><subtitle>123</subtitle> <updated>2023-08-18T10:46:34+08:00</updated> <author> <name>BiChengfei</name> <uri>https://bichengfei.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://bichengfei.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://bichengfei.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator> <rights> © 2023 BiChengfei </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Springboot动态多数据源</title><link href="https://bichengfei.github.io/posts/SpringBoot%E5%8A%A8%E6%80%81%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/" rel="alternate" type="text/html" title="Springboot动态多数据源" /><published>2023-07-03T00:00:00+08:00</published> <updated>2023-07-14T18:48:15+08:00</updated> <id>https://bichengfei.github.io/posts/SpringBoot%E5%8A%A8%E6%80%81%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/</id> <content src="https://bichengfei.github.io/posts/SpringBoot%E5%8A%A8%E6%80%81%E5%A4%9A%E6%95%B0%E6%8D%AE%E6%BA%90/" /> <author> <name>BiChengfei</name> </author> <summary> title: Spring Boot 动态多数据源 author: BiChengfei date: 2023-07-03 14:53:00 +0800 categories: [JAVA] tags: [JAVA, Spring Boot, MySQL] pin: true https://github.com/bichengfei/dynamic-ds 把租户唯一标识存储在ThreadLocal中，然后实现javax.sql.DataSource，重写getConnection方法，使得不同租户，获取不同的数据库连接 在新增租户的时候，JPA 可以自动生成表结构 </summary> </entry> <entry><title>shell</title><link href="https://bichengfei.github.io/posts/shell/" rel="alternate" type="text/html" title="shell" /><published>2021-12-29T15:53:00+08:00</published> <updated>2023-07-10T14:35:59+08:00</updated> <id>https://bichengfei.github.io/posts/shell/</id> <content src="https://bichengfei.github.io/posts/shell/" /> <author> <name>BiChengfei</name> </author> <category term="shell" /> <summary> 自定义命令 bichengfeideMacBook-Pro:~ bichengfei$ cd bichengfeideMacBook-Pro:~ bichengfei$ pwd /Users/bichengfei bichengfeideMacBook-Pro:~ bichengfei$ vi .bash_profile #····编辑文件··· bichengfeideMacBook-Pro:~ bichengfei$ cat .bash_profile | grep alias alias ll='ls -lF' bichengfeideMacBook-Pro:~ bichengfei$ source .bash_profile bichengfeideMacBook-Pro:~ bichengfei$ ll grep ... </summary> </entry> <entry><title>单点登录</title><link href="https://bichengfei.github.io/posts/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/" rel="alternate" type="text/html" title="单点登录" /><published>2021-12-06T00:00:00+08:00</published> <updated>2023-07-10T14:35:59+08:00</updated> <id>https://bichengfei.github.io/posts/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/</id> <content src="https://bichengfei.github.io/posts/%E5%8D%95%E7%82%B9%E7%99%BB%E5%BD%95/" /> <author> <name>BiChengfei</name> </author> <category term="SSO" /> <summary> 访问站点 A 1.1 已登录，正常访问 1.2 未登录，跳转到 SSO 站点，url 中带 A 站点回调地址 URL_A ​ 1.2.1 SSO 站点已登录，调用 URL_A?token=xxxxx ​ 1.2.2 SSO 站点未登录，输入用户名、密码登录 SSO 站点，调用 URL_A?token=xxxxx 1.3 A 站点获取到 token=xxxxx，后台访问 SSO ，验证 token ​ 1.3.1 验证通过，自动登录成功 ​ 1.3.2 验证失败，自动登录失败 ​ </summary> </entry> <entry><title>Innodb中auto_increment处理（官网版）</title><link href="https://bichengfei.github.io/posts/InnoDB%E4%B8%ADauto_increment%E5%A4%84%E7%90%86-%E5%AE%98%E7%BD%91%E7%89%88/" rel="alternate" type="text/html" title="Innodb中auto_increment处理（官网版）" /><published>2021-09-15T00:00:00+08:00</published> <updated>2022-01-21T11:20:24+08:00</updated> <id>https://bichengfei.github.io/posts/InnoDB%E4%B8%ADauto_increment%E5%A4%84%E7%90%86-%E5%AE%98%E7%BD%91%E7%89%88/</id> <content src="https://bichengfei.github.io/posts/InnoDB%E4%B8%ADauto_increment%E5%A4%84%E7%90%86-%E5%AE%98%E7%BD%91%E7%89%88/" /> <author> <name>BiChengfei</name> </author> <category term="MySQL" /> <summary> 《 MySQL 5.7 - InnoDB 中的 AUTO_INCREMENT 处理（个人版）》地址： 官网地址 https://dev.mysql.com/doc/refman/5.7/en/innodb-auto-increment-handling.html InnoDB 提供了一种可配置的锁机制，通过为新插入的行增加 auto_increment 列，可以显著提高 SQL 语句的可伸缩性和性能。要在 InnoDB 中使用 auto_increment 机制，auto_increment 列必须定义为索引的第一列或者唯一列，以便可以对 table 执行等价于对索引列 select max(id)以获取最大列值，这个索引不需要必须是 primary key 或者 unique，但为了避免在auto_increment列中出现重复值，推荐使用这些索引类型。 auto_incre... </summary> </entry> <entry><title>MySQL 5.7 - InnoDB 中的 AUTO_INCREMENT 处理（个人版）</title><link href="https://bichengfei.github.io/posts/InnoDB%E4%B8%ADauto_increment%E5%A4%84%E7%90%86-(%E4%B8%AA%E4%BA%BA%E7%89%88/" rel="alternate" type="text/html" title="MySQL 5.7 - InnoDB 中的 AUTO_INCREMENT 处理（个人版）" /><published>2021-09-15T00:00:00+08:00</published> <updated>2021-09-15T00:00:00+08:00</updated> <id>https://bichengfei.github.io/posts/InnoDB%E4%B8%ADauto_increment%E5%A4%84%E7%90%86-(%E4%B8%AA%E4%BA%BA%E7%89%88/</id> <content src="https://bichengfei.github.io/posts/InnoDB%E4%B8%ADauto_increment%E5%A4%84%E7%90%86-(%E4%B8%AA%E4%BA%BA%E7%89%88/" /> <author> <name>BiChengfei</name> </author> <category term="MySQL" /> <summary> 《 MySQL 5.7 - InnoDB 中的 AUTO_INCREMENT 处理（官网版）》地址： MySQL 官网地址： https://dev.mysql.com/doc/refman/5.7/en/innodb-auto-increment-handling.html auto_increment 三种锁定模式 InnoDB 对于 column，提供了 auto_increment （自增）配置，因为性能和扩展性的考虑，自增值有三种不同的模式，通过 MySQL 启动时的 innodb_autoinc_lock_mode 属性指定，该属性有三种取值，分别是0、1、2。 可通过以下语句查看： show variables where Variable_name = 'innodb_autoinc_lock_mode'; innodb_autoinc_lock_... </summary> </entry> </feed>
